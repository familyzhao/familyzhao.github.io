<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo_公式_图片]]></title>
    <url>%2F2019%2F08%2F07%2Fhexo-%E5%85%AC%E5%BC%8F-%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[向博客中添加图片更改站点配置文件将站点的_config.yml文件中的配置项post_asset_folder设为true 1post_asset_folder: true 存放照片执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。 在markdown 中插入照片图片在文章和首页中同时显示，可以使用标签插件语法。_posts/post_name/image.jpg这张照片可以用以下方式访问：1&#123;% asset_img image_name.jpg (This is an image) %&#125; 其中： asset_img 是关键字 后面接空格然后加图片在同名文件夹中的名字，后面括号内的内容可省略，是图片在网页中显示的名字 添加公式更换 Hexo 的 markdown 渲染引擎，hexo-renderer-kramed 引擎是在默认的渲染引擎 hexo-renderer-marked 的基础上修改了一些 bug ，两者比较接近，也比较轻量级12$ npm uninstall hexo-renderer-marked --save$ npm install hexo-renderer-kramed --save 更改站点配置文件然后，跟换引擎后行间公式可以正确渲染了，但是这样还没有完全解决问题，行内公式的渲染还是有问题，因为 hexo-renderer-kramed 引擎也有语义冲突的问题。接下来到博客根目录下，找到node_modules\kramed\lib\rules\inline.js，把第11行的 escape 变量的值做相应的修改： 12 //escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,escape: /^\\([`*\[\]()#$+\-.!_&gt;])/, 这一步是在原基础上取消了对\,{,}的转义(escape)。同时把第20行的em变量也要做相应的修改 12 //em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, 重新启动hexo（先clean再generate） 更改主题配置文件在 Next 主题中开启 MathJax 开关, 找到mathjax12345mathjax: enable: true per_page: true engine: mathjax cdn: //cdn.bootcss.com/mathjax/2.7.1/latest.js?config=TeX-AMS-MML_HTMLorMML 在文章的头里 添加mathjax： true在根目录下scaffolds/post.md 添加1mathjax: true 之所以要在文章头里设置开关，是因为考虑只有在用到公式的页面才加载 Mathjax，这样不需要渲染数学公式的页面的访问速度就不会受到影响了。没有公式的文章用false 即可。之前生成的页面需要加载mathjax的需要手动添加上述文章头，确保开关为true]]></content>
      <categories>
        <category>“blog&quot;</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[初步学习EM算法]]></title>
    <url>%2F2019%2F08%2F07%2F%E5%88%9D%E6%AD%A5%E5%AD%A6%E4%B9%A0EM%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[EM 算法的部分知识点总结 问题介绍一般的问题：如果概率模型的变量都是观测变量，则给定数据之后，可以直接用极大似然估计法或者贝叶斯估计法来估计模型参数。EM算法解决的问题：存在一个中间过程，观测值是由两步随机过程得到的. 已知三枚硬币 A，B，C ，这些硬币正面出现的概率分别为 。进行如下试验：先投掷硬币 A，若是正面则选硬币 B；若是反面则选硬币 C 。然后投掷被选出来的硬币，投掷的结果如果是正面则记作 1；投掷的结果如果是反面则记作0 。独立重复地 次试验，观测结果为： 1,1,0,1,0,…0,1 。现在只能观测到投掷硬币的结果，无法观测投掷硬币的过程，求估计三硬币正面出现的概率。 其中第一次就是一个隐藏过程。 模型建立 已知最终的观测序列为 假设隐藏层为已知两个过程的模型$P_1,P_2$，但是不知道具体参数,参数集合为$\theta$。 通过极大似然估计的一般过程，目标函数为求公式的最大值： 其中Y 是与Z 有关系的变量，所以公式展开是： 其中$\theta$ 是两个过程中的所有参数。 与一般问题不同的是含有隐藏过程Z ，而它是未观测数据。 模型求解原理目标： 让$L(\theta)$ 迭代的越来越大,直到收敛过程： 带入过程Z 得到新的目标因为log是凸函数，通过jessen不等式得到目标函数的下界：化简得到：最终$L(\theta)$ 的下界为：原问题转化为求上式的最大值时的$\theta$ 值。即：化简（删除了常数项）为：最终原问题转化为上述问题，其中$\theta$ 是下一次迭代的目标值（未知量），其他均为已知量。 算法第一步E步： 求出上一步的最后的式子的解析式，也就是带入 ,得到关于 $\theta$ 的解析式第二步M步骤： 求出最大的$\theta$ ，更新$\theta^{[i]}$收敛条件是：两次迭代之间差距很小。]]></content>
      <categories>
        <category>机器学习算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[动态规划]]></title>
    <url>%2F2019%2F08%2F06%2F%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[应用动态规划解决队列问题 问题描述 计算最少出列多少位同学，使得剩下的同学排成合唱队形说明：N位同学站成一排，音乐老师要请其中的(N-K)位同学出列，使得剩下的K位同学排成合唱队形。合唱队形是指这样的一种队形：设K位同学从左到右依次编号为1，2…，K，他们的身高分别为T1，T2，…，TK， 则他们的身高满足存在i（1&lt;=i&lt;=K）使得T1]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[build_blog]]></title>
    <url>%2F2019%2F08%2F05%2Fbuild-blog%2F</url>
    <content type="text"><![CDATA[基于hexo github 搭建主题为nextT的博客 github 搭建blog创建github 库创建于用户名相同的github库 命名为user_name.github.io 安装Node.js方法百度 安装Hexo更换nmp 为淘宝源123$ npm config set registry https://registry.npm.taobao.org/$ npm config get registry 安装 hexo1npm install hexo -g 创建hexo文件夹定位到自己创建的blog 文件夹1/blog $ hexo init 安装一些组件1$ nmp install 将Hexo 与github连接设置好git, 可百度方法将blog 文件夹下面的站点配置文件_config.yml 进行修改1234eploy: type: git repository: git@github.com:user_name/user_name.github.io.git branch: master 拷贝主题NexT通过git clone 命令进行， 主题会被放在theme 文件夹下12$ cd your-hexo-site$ git clone https://github.com/iissnan/hexo-theme-next themes/next 启动主题与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next 1theme: next 配置主题见链接 NexT 其他文件内容与文件目录介绍hexo 目录中_config.yml 为站点配置文件，source/_post/ 文件夹是存放.md静态文件的目录，其中的.md文件的开头如下其中第三行左边的是类别的关键字（类别的应为就是categoties），右边是具体的类别,不同文件中冒号，左边的是固定的，右边根据需要写所属类别。改模板在\blog\scaffolds\post.md中123title: build_blogdate: 2019-08-05 21:43:01categories: &quot;blog&quot; hexo 常用命令hexo 的所有操作都在git bash 上进行 并且定位在/blog 目录下1234hexo g //生成静态网页并存储在public文件夹下hexo clean // 删除上述文件夹下的文件hexo s -p 5000 //指定本地端口5000 本地查看网页hexo d 上传网页 将public/2019...文件夹下的静态网页上传github]]></content>
      <categories>
        <category>blog</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[C++容器]]></title>
    <url>%2F2019%2F08%2F05%2FC-%E5%AE%B9%E5%99%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[关于初学C++容器的的一些方法的简单记录 容器的初始化与索引数据类型：vector初始化1234vector&lt;int&gt; my_vec&#123;1,2,3&#125;;vector&lt;int&gt; my_vec(10,5);// 初始化10个5vector&lt;int&gt; my_vec(10); // 初始化10个位置vector&lt;int&gt;my_sec&#123;my_vec.begin()+2,my_vec.end()-1&#125;; //通过my_vec进行初始化[2:-1) map初始化 12map&lt;string, int&gt; my_map&#123;&#123; , &#125; , &#123; , &#125;&#125;; //map 存储pair 类型作为元素// map 与python类似 my_map【】 索引可添加元素 数据类型 对于容器的索引，例如vec[index]. index 是unsign类型，类型名字是size_t，当与int类型进行比较，以及运算是容易出错。 12345 vector&lt;int&gt; ans(10,5);vector&lt;int&gt; my_v&#123;ans.begin()+2,ans.end()-5&#125;;//会报错no matching function for call to 'min' auto anss = min(5,ans.size()); ans.size()不是int类型 转化为int 才能比较。auto anss = min(5,ans.size()); 容器的增删改查加排序添加元素 添加数据可以通过容器自带的类似于push_back(), insert()方法；或者inserter() 这样的泛型函数； 1234vector&lt;int&gt; vec&#123;1,2,3,4&#125;;auto it = vec.insert(vec.begin()+1, 10); // 返回的it 是插入位置(10 所在的位置)的迭代器， 在第一个参数（迭代器）前面插入后面参数的内容it = vec.insert(vec.end(), 3, 4); //插入通过构造函数调用后两个参数的返回值（3个4）插入到vec 末尾it = vec.insert(vec.end(),vec2.begin(), vec2.end()); // 将vec2插入到vec1里, 类似python 里面的extend 删除元素123vector&lt;int&gt;::iterator it_1;auto it = vec.erase(it_1); //删除迭代器所指的元素，返回删除元素位置后一位的迭代器。 修改可以通过迭代器的解引用*it 进行索引和修改 也可以是下标索引，map索引的时候可能会添加心的pair 查找123456789101112131415// 对于string vec 调用自己的find 方法auto it = vec.find(target_val, start_index, end_index); // 从索引范围内查找第一个元素 返回元素所在index 若不在则返回比长度大得多的整数// find_first_of , find_last_of声明如下size_t find_last_of (const string&amp; str, size_t pos = npos) const noexcept;size_t find_last_of (const char* s, size_t pos = npos) const;size_t find_last_of (const char* s, size_t pos, size_t n) const;size_t find_last_of (char c, size_t pos = npos) const noexcept;// 对于vector 没有find 方法 需要调用 泛型函数 findauto it = find(vec.begin(), vec.end(), target_val); // 输入输出均为迭代器；与string index不同// 对于map 查找可以用find 返回值是key 也可以用count 返回true false; 容器最大值最小值的索引通过返回最大或者最小值的迭代器，然后与begin()迭代器做差得到123vector&lt;int&gt; v(10);auto it = max_element(v.begin(),v.end());int index = it-v.begin(); 排序泛型函数sort(it.begin(), it.end(),my_sort);123456sort(numbers.begin(),numbers.end(),my_sort);static bool my_sort(int A, intB)&#123;return A&lt;B;//A靠前&#125;my_sort函数为成员函数时（成员函数默认第一个参数是*this） 需要加static 作为一般函数（没有this参数）是不需要 容器的泛型函数反转1234vector&lt;int&gt; arrayRever&#123;1,2,3,4&#125;;reverse(arrayRever.begin(),arrayRever.end()); //没有返回值 就地反转vector&lt;int&gt; vec (arrayRever.rbegin(), arrayRever.rend()); // 初始化反转]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[C—的小问题]]></title>
    <url>%2F2019%2F08%2F05%2FC-%E9%81%87%E8%A7%81%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[介绍了 string 与char int char* 的转化，for 枚举类型，和INT_MAX 类型转换string转const char*12string s ="abc";const char* c_s = s.c_str(); 123string str=“world”;const char *p = str.c_str(); // 要加const或者等号右边用char* const char *p = str.data(); // data():与c_str()类似，但是返回的数组不以空字符终止 const char*转string12const char* c_s ="abc";string s(c_s); string转char*12345string s ="abc";char* c;const int len = s.length();c =new char[len+1];strcpy(c,s.c_str()); char*转string123const char* cpc ="abc";char* pc =new char[100];//足够长strcpy(pc,cpc); 数字转stringauto it = to_string(input) it可以是浮点数，input是char类型是 会得到对应的asicc码； char 转string只能通过初始化string 得到单个字母的string类型1234string str(1,'a')string str; str.push_back('a');stringstream ss;ss&lt;&lt;'a';string str2 = ss.str(); for 枚举用法123456789101112vector &lt;int&gt; vec(10.0);string str="abcdefg";map&lt;string, int&gt; my_map=&#123;&#123;"a", 2&#125;,&#123;"b", 3&#125;&#125;;for(auto &amp;it : vec)&#123;cout&lt;&lt;it&lt;&lt;endl; // 返回的是引用 可以用来修改容器内内容&#125;for(auto it : str)&#123;cout&lt;&lt;it&lt;&lt;endl; // 返回的是char&#125;for(auto it : my_map)&#123;cout&lt;&lt;it.first&lt;&lt;it.second&lt;&lt;endl;//返回的是pair变量&#125; int类型的最大最小值12INT_MAX (INT32_MAX)INT_MIN (INT32_MIN)]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
</search>
